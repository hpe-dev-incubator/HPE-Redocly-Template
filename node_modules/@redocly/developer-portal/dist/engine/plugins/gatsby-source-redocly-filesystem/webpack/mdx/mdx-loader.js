const{getOptions}=require("loader-utils"),mdx=require("@mdx-js/mdx"),crypto=require("crypto"),grayMatter=require("gray-matter"),{slash}=require("gatsby-core-utils"),getSourcePluginsAsRemarkPlugins=require("./convert-plugins"),plugins=require("../../../../gatsby-config").plugins.find(a=>"gatsby-transformer-remark"===a.resolve).options.plugins;function createMDXNode({id:a,node:b,content:c}){const{data:d,content:e}=grayMatter(c),f={id:a,children:[],parent:b.id,internal:{content:c,type:"Mdx"}};return f.frontmatter={title:``,...d,_PARENT:b.id},f.excerpt=d.excerpt,f.rawBody=e,`File`===b.internal.type&&(f.fileAbsolutePath=b.absolutePath),f.internal.contentDigest=crypto.createHash(`md5`).update(JSON.stringify(f)).digest(`hex`),f}module.exports=async function(a){const b=this.async(),{getNode:c,getNodes:d,reporter:e,cache:f,pathPrefix:g,actions:h,getNodeAndSavePathDependency:i}=getOptions(this),j=slash(this.resourcePath);let k=d().find(a=>`File`===a.internal.type&&a.absolutePath===j);k||console.warn(`Can't find GraphQL node for ${j}`);const l=createMDXNode({id:"fakeNodeIdMDXFileABugIfYouSeeThis",node:k,content:a});a=l.rawBody;const m=await getSourcePluginsAsRemarkPlugins({gatsbyRemarkPlugins:plugins,mdxNode:l,getNode:c,getNodes:d,reporter:e,cache:f,pathPrefix:g,actions:h,getNodeAndSavePathDependency:i});let n;-1===a.indexOf("export default ")&&(a="import { MdxLayout } from '@redocly/developer-portal/ui';\n\nexport default MdxLayout;\n\n"+a);try{n=await mdx(a,{mdPlugins:m})}catch(a){return b(a)}const o=`
  import React from 'react'
  import { MDXTag } from '@mdx-js/tag'

  ${n.replace("const { components, ...props } = this.props",`const props = this.props
    const components = { wrapper: React.Fragment };\n`)}
  `;return b(null,o)};